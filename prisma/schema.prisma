// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_ROLE {
  ADMIN
  USER
  INSTRUCTOR
}

model User {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  password       String?
  firstName      String?
  lastName       String?
  profilePicture String?
  verifyEmail    Boolean   @default(false)
  otp            String?
  otpExpires     String?
  role           USER_ROLE @default(USER)
  googleId       String?   @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  Enrollment           Enrollment[]
  instructorEnrollment Enrollment[]      @relation(name: "instructorEnrollment")
  passwordHistory      passwordHistory[]
}

model passwordHistory {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int
  passwordHash String
  createdAt    DateTime @default(now()) @db.Timestamptz(3)
}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  price       Float
  duration    Int
  enrollments Enrollment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Enrollment {
  id        Int              @id @default(autoincrement())
  user      User             @relation(fields: [userId], references: [id])
  userId    Int
  course    Course           @relation(fields: [courseId], references: [id])
  courseId  Int
  status    EnrollmentStatus @default(ACTIVE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  User User[] @relation("instructorEnrollment")
}

enum Role {
  USER
  ADMIN
  INSTRUCTOR
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPOUT
}
